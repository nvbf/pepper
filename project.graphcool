# project: pepper
# version: 38

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type User implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  email: String @isUnique
  password: String
}

type Player implements Node {
  gender: Gender!
  number: Int!
  name: String!
  position: String!
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  team: Team @relation(name: "TeamPlayer")
  height: Int!
  reach: Int!
  blockReach: Int!
  birthYear: Int!
  active: Boolean!
}

type Team implements Node {
  name: String!
  shortName: String!
  createdAt: DateTime!
  slug: String! @isUnique
  id: ID! @isUnique
  updatedAt: DateTime!
  homeMatches: [Match!]! @relation(name: "HomeTeamMatch")
  awayMatches: [Match!]! @relation(name: "AwayTeamMatch")
  players: [Player!]! @relation(name: "TeamPlayer")
}

type Match implements Node {
  firstReferee: Referee @relation(name: "FirstRefereeMatch")
  secondReferee: Referee @relation(name: "SecondRefereeMatch")
  createdAt: DateTime!
  id: ID! @isUnique
  sets: [Set!]! @relation(name: "MatchSet")
  updatedAt: DateTime!
  homeTeam: Team! @relation(name: "HomeTeamMatch")
  awayTeam: Team! @relation(name: "AwayTeamMatch")
  screens: [Screen!]! @relation(name: "MatchScreen")
}

type Set implements Node {
  startTime: DateTime!
  endTime: DateTime!
  homeScore: Int!
  awayScore: Int!
  createdAt: DateTime!
  id: ID! @isUnique
  match: Match @relation(name: "MatchSet")
  updatedAt: DateTime!
}

type Referee implements Node {
  name: String!
  matchesAsFirst: [Match!]! @relation(name: "FirstRefereeMatch")
  matchesAsSecond: [Match!]! @relation(name: "SecondRefereeMatch")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Overlay implements Node {
  isShowing: Boolean!
  position: ScreenPosition!
  componentName: String!
  screen: Screen @relation(name: "ScreenOverlay")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Screen implements Node {
  match: Match! @relation(name: "MatchScreen")
  overlays: [Overlay!]! @relation(name: "ScreenOverlay")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum Gender {
  MALE
  FEMALE
}

enum ScreenPosition {
  TOP_LEFT
  TOP_CENTER
  TOP_RIGHT
  MAIN
}